[[{"i":"#","p":["Home Page"]},{"i":"welcome","l":"Welcome!!","p":["I'm Yash Thakre from \uD83C\uDDEE\uD83C\uDDF3, a passionate learner and developer with a deep interest in the broader realm of software development. Throughout my journey, I've ventured into diverse technologies, tackled intriguing problems, and had the privilege of collaborating with exceptional minds.","I'm delighted to have you here! This platform serves as a window into my world, where I share my curiosities, learnings, projects, and all things related to Software development and DSA. I've meticulously crafted this website using Retype, a powerful static site generator, to showcase my work in an organized and accessible manner.","Please feel at home as you navigate through the diverse sections and articles on this site. You can also check out my Blog. Within these pages, I've curated a collection of thought-provoking blog posts that delve into topics I find fascinating. Whether you're a fellow developer or a curious learner, I'm confident you'll find valuable insights and ideas here."]},{"i":"lets-connect","l":"Let's Connect...","p":["I firmly believe that continuous learning is the catalyst for personal and professional growth. This website acts as a living documentation of my explorations, where I share my experiences, insights, and the invaluable lessons I've acquired along the way.","Should you wish to connect with me or have any inquiries, I'm readily available on my social media platforms. Engaging with like-minded individuals and fostering meaningful discussions is a passion of mine, so don't hesitate to reach out. Let's connect and collaborate!"]},{"l":"Socials","p":["LinkedIn","Github","Resume"]}],[{"l":"Alembic","p":["Alembic is a lightweight database migration tool for SQLAlchemy (python). Just like we have a version control for Git, Alembic acts as a version control for the Database."]},{"l":"Setup","p":["This section contains information about the steps to setup alembic and also what each of its files mean. If you want to know more about the implementation, you can g","Since Alembic is a python tool, you can easily install by using pip package manner. Just run the following command to install alembic in your environment.","Once this is done, we are ready to use alembic, you can try writing alembic in the terminal to see if it is installed.","Now to start with alembic, we need to initialise our project. So just like git we run the init method to set up alembic for our project.","Once you have initialised alembic, a new folder named alembic will pop up along with a file called alembic.ini. The folder structure for that folder will be as follows:","Here's what these files do: 1. alembic.ini: This is the configuration file for alembic. It defines the database connection and other information which alembic uses to do the migrations. We can also mention things like which tables to include/exclude etc. Following is a sample alembic.ini file:","There might be cases where we want to use multiple .ini files for different cases. Say for example you can have a prod.ini, dev.ini etc. We can then explicitly specify which file to use.","env.py: This is a Python script that sets up the migration environment and provides the necessary configurations for Alembic to manage database migrations.","versions: Versions is a folder which contains all the migration scripts for upgrading or downgrading the datbase. The files inside version are mostly auto-generated and we just need to edit them as per our use-case."]},{"l":"General Flow of things","p":["In alembic, for most use-cases, the following flow is followed:"]},{"l":"Key Commands","p":["Alembic has the following commands available for us in its CLI:","From the above, the ones that are the most important are history, revision and upgrade."]},{"l":"History","p":["History is like your git log. It shows all the changes made in their appropriate order. It shows all the changes/commits or revisions along with their description and the head.","To view the history, we need to run alembic history"]},{"l":"Revision","p":["A revision in alembic is like a git commit. It marks a change in the DB and contains the details about how to get to that state or come back from the state.","Every revision has a description and also a unique hash. This hash can then be used upgrade or downgrade to that particular revision.","To create a new revision we run","This will create a new revision file inside the version.","Here, we can see, every revision has an ID. It also states the revision it upgrades or goes back to. If in case there is a conflict where 2 revisions roll back to the same version, we can change the down_revision values to put them in the right order.","The revision also has other features like","--rev-id is used to give a custom ID to the revisions.","--autogenerate goes through the DB and compares the difference between the DB and the scripts. And it autogenerates the commands to bring the scripts upto the DB. This can be useful when you are doing manual additions to the DB and want to have them added to the scripts too.","Alembic keeps a track of the current version in the DB with the help of a table called alembic. So if we ever need to check the verison of something we can check it on the DB. The local version is dictated by the revision files. Alembic iterates through all the revision files to generate a history."]},{"l":"Upgrade and Downgrade","p":["Whenever we have changes that need to be migrated to the DB, we run the upgrade command. The upgrade command checks the DB and runs all the scripts between the version in the DB and the current local version.","This brings the DB to the latest revision. In case we need to upgrade to a specific revision, we can directly mention the id of that commit. alembic upgrade id","Similar to upgrade, downgrade brings down the DB to a previous revision if we mention that ID OR we can mention it relative to the head."]},{"l":"Conclusion","p":["This was a very brief overview of alembic and what its capabilities are. There are a lot more concepts like branching, merging branches etc. But on the broader scale, this is how alembic is used to migrate and control database schemas. It's a useful tool for simplifying and organising database migrations."]}]]